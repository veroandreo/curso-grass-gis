{
  "hash": "466f5cad6646d782347b5f357c1fac3e",
  "result": {
    "markdown": "---\ntitle: \"Intro a GRASS GIS\"\nauthor: Verónica Andreo\ntitle-slide-attributes: \n  data-background-color: \"#1A428A\"\nformat:\n  revealjs: \n    hash-type: number \n    slide-number: true\n    chalkboard: \n      buttons: true\n    preview-links: auto\n    logo: \"../assets/img/logos_para_fondo_oscuro.png\"\n    theme: [default, gulich]\nfrom: markdown+emoji\n---\n\n\n## About me {background-color=\"#1A428A\"}\n\n<br>\n\n::: columns\n::: {.column width=\"60%\"}\n-   Investigadora y docente en el Instituto Gulich\n-   Dra. en Cs. Biológicas y Mgter. en Aplicaciones de la Información Espacial\n-   Aplicaciones de la información geo-espacial y de sensado remoto a problemas de salud pública\n-   Miembro del equipo de desarrollo de GRASS GIS y coordinadora del PSC; OSGeo Charter member & FOSS4G enthusiast\n:::\n\n::: {.column width=\"40%\"}\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-4beac614cd3d51bb35f9\" style=\"width:384px;height:384px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-4beac614cd3d51bb35f9\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[-31.5204194,-64.4653258,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"Gulich\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[-31.5204194,-31.5204194],\"lng\":[-64.4653258,-64.4653258]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n:::\n:::\n\n{{< fa globe >}} <https://veroandreo.gitlab.io/>\n\n\n## Breve intro a los FOSS\n\nFree and Open Source Software (FOSS) significa que **cualquiera** puede usar, copiar, estudiar, y modificar el software. El código fuente es abierto, se comparte gratuitamente, y las personas son libres de modificarlo y mejorarlo según sus necesidades.\n\n![](../assets/img/foss.png){fig-align=\"center\" width=70%}\n\n\n## Breve intro a OSGeo\n\nLa Fundación [OSGeo](https://www.osgeo.org/) fue creada en 2006 para dar soporte al desarrollo colaborativo de software para aplicaciones espaciales y promover su uso.\n\n![](../assets/img/osgeo-logo.png){fig-align=\"left\" width=50%}\n\n\n## Breve intro a OSGeo\n\n::: columns\n\n::: {.column .smaller width=\"70%\"}\n-   Los proyectos deben gestionarse por sí mismos, procurando el consenso y fomentando la participación de todos los colaboradores.\n-   Los colaboradores son un recurso escaso y los proyectos exitosos los cortejan y los alientan.\n-   Se alienta a los proyectos a adoptar estándares abiertos y a colaborar con otros proyectos de OSGeo.\n-   Los proyectos son responsables de revisar y controlar sus códigos fuente para asegurar su integridad.\n:::\n\n::: {.column width=\"30%\"}\n<br> \n![](https://grass.osgeo.org/images/other/Grass_osgeo_codesprint_2018.jpg)\n:::\n\n:::\n\n\n## GRASS GIS: Breve historia\n\n- **GRASS GIS** (Geographic Resources Analysis Support System), es un paquete de software libre y de código abierto utilizado para la gestión y análisis de datos geoespaciales, procesamiento de imágenes, producción de gráficos y mapas, modelado espacial y visualización.\n\n- Se utiliza en entornos académicos y comerciales de todo el mundo, y también en organismos gubernamentales.\n\n- Originalmente desarrollado por los Laboratorios de Investigación de Ingeniería de la Construcción del Ejército de USA como una herramienta para la gestión del territorio y la planificación ambiental.\n\n\n::: footer\n@neteler_grass_book, @neteler_grass_2012\n:::\n\n\n---\n\n### Un poquito de historia (geek) sobre GRASS...\n\n<br>\n\n::: {.center}\n\n```{=html}\n<iframe width=\"700\" height=\"400\" scrolling=\"no\" src=\"//av.tib.eu/player/12963\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n:::\n\n:::{.callout-note appearance=\"simple\"}\n:::{.tiny}\nNo se pierdan la página [GRASS history](https://grass.osgeo.org/about/history/) y la lista de [releases](https://grass.osgeo.org/about/history/releases/) para más detalles y algunas anécdotas\n:::\n:::\n\n\n## Ventajas y Desventajas\n\n::: columns\n::: {.column width=\"50%\"}\n**Ventajas**\n\n-   código abierto\n-   fuerte comunidad de usuarios, y apoyo comercial\n-   herramientas para datos raster/vectores 2D/3D, imágenes, espacio-temporales\n-   interfaz grafica GUI y linea de comandos CLI (facilita la escritura de rutinas)\n-   API y librerías de Python\n:::\n\n::: {.column width=\"50%\"}\n**Desventajas**\n\n-   el inicio es un tanto complicado en comparación con otros SIG \\[WIP\\]\n-   formato nativo (requiere la importación de datos, ofrece también la posibilidad de vincular formatos externos)\n-   datos vectoriales con topología (confuso para principiantes, a veces es difícil importar datos rotos)\n:::\n:::\n\n## Cuándo usar GRASS GIS?\n\n::: columns\n::: {.column width=\"50%\"}\n**Sí**\n\n-   análisis intensivo de datos geoespaciales\n-   trabajar con datos vectoriales topológicos\n-   analizar conjuntos de datos espacio-temporales\n-   integrar y escribir rutinas con Python\n-   desplegar aplicaciones del lado del servidor (ej., WPS)\n:::\n\n::: {.column width=\"50%\"}\n**Mejor no**\n\n-   para visualizar datos geográficos de forma fácil y rápida (mejor usar QGIS)\n-   si te asustan los *location* y *mapsets*\n-   si no tenés idea sobre CRS\n:::\n:::\n\n---\n\n::: {.center}\nAlguna vez trataron de abrir GRASS GIS?\n\n![](../assets/img/start_screen2.png){width=50%}\n:::\n\n\n## Nociones básicas\n\n-   La **BASE DE DATOS GRASS o GRASS DATABASE** (también llamada \"GISDBASE\") es un directorio, usualmente llamado `grassdata` que contiene todos nuestros *LOCATIONs*\n-   Un **LOCATION** se define por su sistema de coordenadas.\n-   Un **MAPSET** es un subdirectorio dentro de un *Location*, equivalente a la noción de proyecto en otros GIS. Los **MAPSETs** pueden hacer referencia a distintos temas, regiones, etc.\n\n## GRASS DB, Location y Mapsets\n\nPara iniciar GRASS GIS se necesita especificar una ruta compuesta de *Database*, *Location* y *Mapset*\n\n::: {.center}\n<img src=\"../assets/img/grass_database.png\" width=\"65%\"/>\n\n[GRASS database](https://grass.osgeo.org/grass-stable/manuals/grass_database.html)\n:::\n\n\n---\n\n**Por qué esta estructura?**\n\n-   GRASS GIS tiene un *formato nativo* para los datos raster y vectoriales, por lo tanto estos deben ser *importados* or *vinculados* a un Location y Mapset (ver [r.external](https://grass.osgeo.org/grass-stable/manuals/r.external.html) por ejemplo).\n\n**Cuáles son las ventajas?**\n\n-   GRASS DATABASE, LOCATIONs y MAPSETs son directorios *que pueden ser fácilmente compartidos con otros usuarios*.\n-   La base de datos de GRASS (`grassdata`) puede ser *local o remota*, y permite configurar *permisos especiales* para cada mapset en un LOCATION.\n-   Todos los mapas dentro de un LOCATION tienen necesariamente el mismo sistema de coordenadas.\n\n---\n\nEn GRASS 8, se elimina la pantalla de inicio...\n\n![](../assets/img/grass_start.png)\n\n---\n\ny en GRASS 8.2+ se ofrece la opción \"single window\" por defecto\n\n![](../assets/img/grass_single_window.png){fig-align=\"center\"}\n\n::: {style=\"text-align: center;\"}\nno es más linda? {{< fa heart >}}\n:::\n\n## Tipos de datos en GRASS GIS\n\n-   [Raster](https://grass.osgeo.org/grass-stable/manuals/rasterintro.html) (incluyendo [imágenes satelitales](https://grass.osgeo.org/grass-stable/manuals/imageryintro.html))\n-   [Raster 3D o voxel](https://grass.osgeo.org/grass-stable/manuals/raster3dintro.html)\n-   [Vector](https://grass.osgeo.org/grass-stable/manuals/vectorintro.html): punto, línea, límite o borde, área, caras\n-   [Espacio-temporales](https://grass.osgeo.org/grass-stable/manuals/temporalintro.html): colecciones de datos raster (**STRDS**), raster 3D (**STR3DS**) o vectores (**STVDS**)\n\n## Módulos\n\nMás de [500 módulos](https://grass.osgeo.org/grass-stable/manuals/full_index.html) para las más variadas tareas, pero con una organización clara:\n\n::: {style=\"font-size: 0.7em;\"}\n| Prefix                                                                   | Function class | Type of command         | Example                                                                                                                |\n|------------------|------------------|-------------------|------------------|\n| [g.\\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#g)   | general        | general data management | [g.rename](https://grass.osgeo.org/grass-stable/manuals/g.rename.html): renames map                                    |\n| [d.\\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#d)   | display        | graphical output        | [d.rast](https://grass.osgeo.org/grass-stable/manuals/d.rast.html): display raster map                                 |\n| [r.\\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#r)   | raster         | raster processing       | [r.mapcalc](https://grass.osgeo.org/grass-stable/manuals/r.mapcalc.html): map algebra                                  |\n| [v.\\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#r)   | vector         | vector processing       | [v.clean](https://grass.osgeo.org/grass-stable/manuals/v.clean.html): topological cleaning                             |\n| [i.\\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#i)   | imagery        | imagery processing      | [i.pca](https://grass.osgeo.org/grass-stable/manuals/i.pca.html): Principal Components Analysis on imagery group       |\n| [r3.\\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#r3) | voxel          | 3D raster processing    | [r3.stats](https://grass.osgeo.org/grass-stable/manuals/r3.stats.html): voxel statistics                               |\n| [db.\\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#db) | database       | database management     | [db.select](https://grass.osgeo.org/grass-stable/manuals/db.select.html): select value(s) from table                   |\n| [ps.\\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#ps) | postscript     | PostScript map creation | [ps.map](https://grass.osgeo.org/grass-stable/manuals/ps.map.html): PostScript map creation                            |\n| [t.\\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#t)   | temporal       | space-time datasets     | [t.rast.aggregate](https://grass.osgeo.org/grass-stable/manuals/t.rast.aggregate.html): raster time series aggregation |\n:::\n\n\n## Add-ons o extensiones\n\nLas extensiones o **add-ons** pueden ser instaladas desde el [repositorio central](https://grass.osgeo.org/grass7/manuals/addons/) o desde *GitHub* (u otros similares) usando el comando [g.extension](https://grass.osgeo.org/grass-stable/manuals/g.extension.html)\n\n``` bash\n # instalar una extensión desde el repositorio de GRASS GIS\n g.extension extension=r.hants\n\n # instalar una extensión desde un repositorio github\n g.extension extension=r.in.sos \\\n   url=https://github.com/pesekon2/GRASS-GIS-SOS-tools/tree/master/sos/r.in.sos\n```\n\n## Add-ons o extensiones\n\n-   Si tenés conocimientos de programación o no, pero te gusta el software de código abierto y GRASS GIS, no dudes en [contribuir](https://github.com/OSGeo/grass/blob/main/CONTRIBUTING.md)!\n\n::: {style=\"font-size: 7em; text-align: center\"}\n:technologist:\n:::\n\n## Región computacional\n\n![](../assets/img/region.png){fig-align=\"center\"}\n\n:::{.callout-note}\nPara más detalles, ver la wiki sobre [Región computacional](https://grasswiki.osgeo.org/wiki/Computational_region)\n:::\n\n\n## Región computacional\n\n-   La **región computacional** es la configuración de límites del área de análisis y resolución espacial (raster).\n-   La **región computacional** puede ser definida y modificada con el comando [g.region](https://grass.osgeo.org/grass-stable/manuals/g.region.html) a la extensión de un mapa vectorial, un raster o manualmente a algún area de interés.\n-   Los mapas raster de salida *(output)* tendrán una extensión y resolución espacial igual a la región computacional, mientras que los mapas vectoriales son siempre procesados en su extensión original.\n\n\n## Región computacional\n\n**Cuáles son las ventajas?**\n\n-   Mantener los resultados consistentes\n-   Evitar recortar los mapas antes del análisis de sub-áreas\n-   Probar un algoritmo o proceso computacional exigente (time consuming) en áreas pequeñas\n-   Ajustar la configuración o parámetros de un determinado módulo\n-   Ejecutar diferentes procesos en diferentes áreas\n\n\n## Interfaces\n\nGRASS GIS ofrece diferentes interfaces para la interacción entre usuarios y software\n\n- GUI\n- CLI\n- Python APIs\n- QGIS\n- R\n- etc...\n\n#### Veamos cada una de ellas! {style=\"text-align: center;\"}\n\n------------------------------------------------------------------------\n\n### Interfaz Gráfica de Usuario (GUI)\n\n::: r-stack\n![](../assets/img/grass_single_window_gui_00.png){fig-align=\"center\"}\n\n![](../assets/img/grass_single_window_gui_1.png){.fragment fig-align=\"center\"}\n\n![](../assets/img/grass_single_window_gui_3.png){.fragment fig-align=\"center\"}\n\n![](../assets/img/module_tree_and_search_zoom.png){.fragment fig-align=\"center\"}\n\n![](../assets/img/grass_single_window_gui_2.png){.fragment fig-align=\"center\"}\n\n![](../assets/img/grass_single_window_gui_4.png){.fragment fig-align=\"center\"}\n:::\n\n------------------------------------------------------------------------\n\n### Línea de Comandos o terminal\n\n:::{.center}\n![](../assets/img/grass_command_line.png){width=80%}\n:::\n\n------------------------------------------------------------------------\n\n### Ventajas de la línea de comandos\n\n-   Ejecutar *`history`* para ver todos los comandos anteriores\n-   La historia se almacena individualmente por MAPSET\n-   Buscar en la historia con `<CTRL-R>`\n-   Guardar los comandos en un archivo: `history > my_protocol.sh`, pulir/anotar el protocolo y volver a ejecutar con: `sh my_protocol.sh`\n-   Llamar la GUI del módulo y \"Copiar\" el comando para su posterior replicación.\n\n------------------------------------------------------------------------\n\n### GRASS + {{< fa brands python size=2x >}}\n\nLa forma más sencilla de ejecutar una rutina de Python en GRASS GIS, es a través del *Simple Python editor* ... o también se puede escribir la rutina en un editor de texto y ejecutarla desde la línea de comandos (terminal negra) o la GUI (`File > Launch script`):\n\n``` python\n\n #!/usr/bin/env python\n # simple example for pyGRASS usage: raster processing via modules approach\n\n from grass.pygrass.modules.shortcuts import general as g\n from grass.pygrass.modules.shortcuts import raster as r\n\n g.message(\"Filter elevation map by a threshold...\")\n\n # set computational region\n input = 'elevation'\n g.region(raster=input)\n output = 'elev_100m'\n thresh = 100.0\n\n r.mapcalc(f\"{output} = if({input} > {thresh}, {input}, null())\", overwrite = True)\n r.colors(map=output, color=\"elevation\")\n```\n\n------------------------------------------------------------------------\n\n... o con Jupyter notebooks y el paquete `grass.jupyter`\n\n:::{.center}\n![](../assets/img/jupyter_notebook_locally.png){width=70%}\n:::\n\n:::{.callout-note appearance=\"simple\"}\n:::{.tiny}\nPara más ejemplos ver la <a href=\"https://grasswiki.osgeo.org/wiki/GRASS_GIS_Jupyter_notebooks#List_of_selected_GRASS_GIS_Jupyter_notebooks\">lista de Jupyter notebooks</a> que usan GRASS\n:::\n:::\n\n::: footer\n@haedrich_grass_jupyter\n:::\n\n------------------------------------------------------------------------\n\n:::{style=\"text-align:left\"}\n![](../assets/img/QGIS_logo_2017.png){width=50%}\n:::\n\n<br>\n\nHay dos formas de utilizar las funciones de GRASS GIS dentro de QGIS:\n\n- [GRASS GIS plugin](https://docs.qgis.org/3.28/en/docs/user_manual/grass_integration/grass_integration.html)\n- [Processing toolbox](https://docs.qgis.org/3.28/en/docs/user_manual/processing/toolbox.html)\n\n------------------------------------------------------------------------\n\nUsando GRASS GIS a través del *GRASS GIS plugin*\n\n![](../assets/img/qgis_grass_plugin.png) \n\n------------------------------------------------------------------------\n\nUsando GRASS GIS a través del *Processing Toolbox*\n\n![](../assets/img/qgis_processing.png)\n\n---\n\nAdemás con el GRASS provider, podemos visualizar nuestros proyectos, mapsets y mapas de la base de datos de GRASS en QGIS:\n\n![](../assets/img/grass_provider_qgis.png){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n### GRASS + {{< fa brands r-project size=2x >}} a través de `rgrass` \n\n<br><br>\n\nGRASS GIS y R se pueden usar juntos de dos maneras:\n\n-   [R dentro de una sesión de GRASS GIS](https://grasswiki.osgeo.org/wiki/R_statistics/rgrass#R_within_GRASS)\n-   [GRASS GIS dentro de una sesión de R](https://grasswiki.osgeo.org/wiki/R_statistics/rgrass#GRASS_within_R)\n\n<br><br>\n\n:::{.callout-note}\nDetalles y ejemplos en la wiki <a href=\"https://grasswiki.osgeo.org/wiki/R_statistics/rgrass7\">GRASS y R</a>\n:::\n\n------------------------------------------------------------------------\n\nAbriendo RStudio y R desde GRASS\n\n![](../assets/img/RwithinGRASS_and_Rstudio_from_grass.png)\n<!-- ### WPS - OGC Web Processing Service -->\n\n<!-- -   [Web Processing Service](https://en.wikipedia.org/wiki/Web_Processing_Service) es un standard de la [OGC](https://en.wikipedia.org/wiki/Open_Geospatial_Consortium). -->\n<!-- -   [ZOO-Project](http://zoo-project.org/) y [PyWPS](http://pywps.org/) son interfaces que permiten ejecutar comandos de GRASS GIS de manera simple desde la web. -->\n\n------------------------------------------------------------------------\n\n### GRASS in the cloud: [*actinia*](https://actinia.mundialis.de/)\n\n::: columns\n\n:::{.column width=\"70%\"}\n-   API REST para procesamiento escalable, distribuido y de alto rendimiento\n-   Utiliza GRASS para tareas de computación\n-   Sigue el paradigma de llevar algoritmos a los geodatos almacenados en la nube\n-   OSGeo Community project desde 2019.\n-   Disponible en [GitHub](https://github.com/mundialis/actinia_core)\n:::\n\n:::{.column width=\"30%\"}\n![](../assets/img/actinia.png)\n:::\n\n:::\n\n::: {.callout-note}\n:::{.tiny}\nPara más info, ver el <a href=\"https://neteler.gitlab.io/actinia-introduction/\">Tutorial sobre Actinia</a> en la Escuela de verano OpenGeoHub 2019 y el trabajo presentado en la conferencia <a href=\"https://zenodo.org/record/2631917#.YEZ8pf4o9hE\">BiDS 2019</a> por Neteler et al.\n:::\n:::\n\n------------------------------------------------------------------------\n\n### GRASS in the cloud: [*Open Plains*]()\n\n![](../assets/img/open_plains.png)\n\n::: footer\n@white_open_plains\n:::\n\n------------------------------------------------------------------------\n\n## Comandos frecuentes y algo más\n\n- [r.import](https://grass.osgeo.org/grass-stable/manuals/r.import.html) y [v.import](https://grass.osgeo.org/grass-stable/manuals/v.import.html): importan mapas de tipo raster y vectorial con re-proyección, recorte y remuestreo al vuelo.\n\n``` bash\n\n ## IMPORT RASTER DATA: SRTM V3 data for NC\n\n # set computational region to e.g. 10m elevation model:\n g.region raster=elevation -p\n\n # Import with reprojection on the fly\n r.import input=n35_w079_1arc_v3.tif output=srtmv3_resamp10m \\\n  resample=bilinear extent=region resolution=region \\\n  title=\"SRTM V3 resampled to 10m resolution\"\n\n ## IMPORT VECTOR DATA\n\n # import SHAPE file, clip to region extent and reproject to\n # current location projection\n v.import input=research_area.shp output=research_area extent=region\n```\n\n------------------------------------------------------------------------\n\n- [g.list](https://grass.osgeo.org/grass-stable/manuals/g.list.html): lista el o los tipos de elementos/datos elegidos por el usuario (i.e., raster, vector, raster 3D, region, labels). Opcionalmente permite usar patrones y expresiones regulares para realizar la búsqueda y listado.\n\n``` bash\ng.list type=vector pattern=\"r*\"\ng.list type=vector pattern=\"[ra]*\"\ng.list type=raster pattern=\"{soil,landuse}*\"\n```\n\n------------------------------------------------------------------------\n\n- [g.remove](https://grass.osgeo.org/grass-stable/manuals/g.remove.html), [g.rename](https://grass.osgeo.org/grass-stable/manuals/g.rename.html) y [g.copy](https://grass.osgeo.org/grass-stable/manuals/g.copy.html): Estos módulos eliminan, renombran o copian mapas de la base de datos ya sea dentro de un mapset o desde otros mapsets.\n\n``` bash\ng.remove type=vector name=lakes -f\ng.rename vector=lakes,mylakes\ng.copy vector=lakes,mylakes\n```\n\n<br>\n\n:::{.callout-warning}\nEstas tareas deben **SIEMPRE** realizarse desde dentro de GRASS\n:::\n\n---\n\n- [g.region](https://grass.osgeo.org/grass-stable/manuals/g.region.html): Maneja los límites y resolución de la región computacional.\n\n``` bash\n ## Subset a raster map\n # 1. Check region settings\n g.region -p\n\n # 2. Change region (here: relative to current N and W values, expanding values in map units)\n g.region n=n-3000 w=w+4000\n\n # 3. Subset map\n r.mapcalc \"new_elev = elevation\"\n r.colors new_elev color=viridis\n\n # 4. Display maps\n d.mon wx0\n d.rast elevation\n d.rast new_elev\n```\n\n---\n\n- [g.mapset](https://grass.osgeo.org/grass-stable/manuals/g.mapset.html) y [g.mapsets](https://grass.osgeo.org/grass-stable/manuals/g.mapsets.html): Estos módulos permiten cambiar de mapset y agregar o remover mapsets a la lista de mapsets accesibles.\n\n``` bash\n # print current mapset\n g.mapset -p\n\n # change to a different mapset\n g.mapset mapset=modis_lst\n\n # print mapsets in the search path\n g.mapsets -p\n\n # list available mapsets in the location\n g.mapsets -l\n\n # add mapset to the search path\n g.mapsets mapset=modis_lst operation=add\n```\n\n---\n\n- [r.info](https://grass.osgeo.org/grass-stable/manuals/r.info.html) y [v.info](https://grass.osgeo.org/grass-stable/manuals/v.info.html): Son módulos muy útiles para obtener información básica sobre los mapas como también su historia.\n\n``` bash\n # info for raster map\n r.info elevation\n\n # info for vector map\n v.info nc_state\n\n # history of vector map\n v.info nc_state -h\n```\n\n---\n\n- [--exec en el comando de inicio de GRASS GIS](https://grass.osgeo.org/grass-stable/manuals/grass7.html): Esta opción permite ejecutar módulos o rutinas de trabajo escritas en bash o Python sin la necesidad de iniciar GRASS GIS (i.e., sin abrir el software).\n\n``` bash\n # running a module\n grass /path/to/grassdata/nc_spm_08_grass7/PERMANENT/ --exec r.univar map=elevation\n\n # running a script\n grass /path/to/grassdata/nc_spm_08_grass7/PERMANENT/ --exec sh test.sh\n\n ## test.sh might be as simple as:\n #!/bin/bash\n g.region -p\n g.list type=raster\n r.info elevation\n```\n\n\n# AYUDA!!!\n\n::: {style=\"color: #e81f76;\"}\n\n{{< fa ambulance size=7x >}}\n\n\n:::\n\n---\n\n### KEEP CALM and GRASS GIS\n\n- [g.manual](https://grass.osgeo.org/grass-stable/manuals/g.manual.html): en la GUI bajo el menú de \"Ayuda\" o simplemente presionando `<F1>`\n- `--help` o `--h` + nombre del módulo en la terminal\n- <https://grass.osgeo.org/learn/manuals/>\n- <https://grass.osgeo.org/learn/tutorials/>\n- [GRASS wiki](https://grasswiki.osgeo.org/wiki/GRASS-Wiki): ejemplos, explicaciones y ayuda sobre módulos o tareas particulares, [tutoriales](https://grasswiki.osgeo.org/wiki/Category:Tutorial), aplicaciones, noticias, etc.\n- [Jupyter notebooks](https://grasswiki.osgeo.org/wiki/GRASS_GIS_Jupyter_notebooks) con ejemplos de rutinas para diferentes aplicaciones\n- lista de mails grass-user: [subscribite](https://lists.osgeo.org/mailman/listinfo/grass-user) y envía tu consulta o revisa los [archivos](https://lists.osgeo.org/pipermail/grass-user/)\n\n\n## Enlaces (muy) útiles\n\n- [Lista de tutoriales diversos](https://grass.osgeo.org/learn/tutorials/)\n- [GRASS intro workshop en NCSU](https://ncsu-osgeorel.github.io/grass-intro-workshop/)\n- [Unleash the power of GRASS GIS en US-IALE 2017](https://grasswiki.osgeo.org/wiki/Unleash_the_power_of_GRASS_GIS_at_US-IALE_2017)\n- [GRASS GIS workshop en Jena 2018](https://training.gismentors.eu/grass-gis-workshop-jena/)\n- [Raster data processing in GRASS GIS](https://grass.osgeo.org/grass-stable/manuals/rasterintro.html)\n- [Vector data processing in GRASS GIS](https://grass.osgeo.org/grass-stable/manuals/vectorintro.html)\n\n\n## Referencias\n\n::: {#refs .tiny}\n:::\n\n---\n\n<br><br><br>\n\n::: {.center}\n\n![](../assets/img/grass_logo_alphab.png)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<script src=\"../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<link href=\"../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/leaflet-binding-2.1.2/leaflet.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}