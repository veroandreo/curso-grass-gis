{
  "hash": "366c73503789b400edde89f9d2b5a9de",
  "result": {
    "markdown": "---\ntitle: Instalar software en Colab\nauthor: Verónica Andreo\ndate: today\nformat:\n  html:\n    code-tools: true\n    code-copy: true\n    code-fold: false\nexecute:\n  eval: false\n  cache: false\n  keep-ipynb: true\n---\n\n## Instalar GRASS GIS en Colab\n\nComo primer paso, cada vez que iniciemos una nueva sesión, necesitaremos \ninstalar GRASS GIS. Pueden copiar estas celdas a sus copias de las \nnotebooks con las que trabajaremos.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n%%bash\nDEBIAN_FRONTEND=noninteractive \nsudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable \napt update \napt install grass subversion grass-dev\napt remove libproj22\n```\n:::\n\n\n:::{.callout-note}\nSi al importar datos con reproyección al vuelo, se encuentran con errores del \ntipo: `Flag -r requires GDAL library: No module named '_gdal'`, se recomienda\ninstalar la librería [pygdal](https://github.com/nextgis/pygdal):\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npip install pygdal\n```\n:::\n\n\n:::\n\n## Conectar nuestro Drive a la sesión de Colab\n\nLuego, montamos nuestro drive donde tenemos la carpeta `curso_grass_2023`. Para \neso importamos la librería `drive`.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# import drive from google colab\nfrom google.colab import drive \n```\n:::\n\n\nDefinimos un punto de montaje y montamos nuestro drive, esto es equivalente\na enchufar y leer un pen drive o un disco externo. Nos va a pedir que le \ndemos permisos para acceder.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# define mounting point and mount drive\ndrive.mount(\"/content/drive\")\n```\n:::\n\n\nDefinimos la carpeta `curso_grass_2023` como nuestro home, nos movemos allí\ny listamos su contenido para corrobar que estamos donde queremos estar.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport os\n\nhomedir = \"/content/drive/MyDrive/curso_grass_2023\"\nos.chdir(homedir)\nos.listdir()\n```\n:::\n\n\nTambién podemos montar nuestro drive directamente desde la interfaz gráfica y\nver allí el contenido de las carpetas:\n\n![](assets/img/colab_mount_gdrive.png)\n\n## Ejecutar comandos de R en Colab\n\nColab nos permite ejcutar comandos de python por defecto. Usando ciertos\ncaracteres mágicos como `!` o `%%bash` podemos ejecutar comandos\nen bash, i.e., como en una terminal de Linux. En este caso, colab tiene\nUbuntu.\n\nPara ejecutar comandos de R, tenemos dos opciones. Una es simplemente \ncambiar de runtime o entorno de ejecución a R. Para esto, vamos al menú \nprincipal Runtime >> Change runtime type y en el cuadro que se despliega \nelegimos R. El problema con esta aproximación es que no hay una forma\nnativa de montar nuestro GDrive y acceder fácilmente a los archivos.\nSi bien existe un paquete de R \n[`googledrive`](https://googledrive.tidyverse.org/index.html) que permite\nla conexión, éste no funciona para conectarnos a nuestro grassdata e iniciar\nuna sesión de GRASS allí.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# install and load googledrive library\ninstall.packages(\"googledrive\")\nlibrary(\"googledrive\")\n\n# authorize google drive\ndrive_auth(\n  email = gargle::gargle_oauth_email(),\n  path = NULL,\n  scopes = \"https://www.googleapis.com/auth/drive\",\n  cache = gargle::gargle_oauth_cache(),\n  use_oob = gargle::gargle_oob_default(),\n  token = NULL\n)\n\n# list content\ndrive_ls()\n```\n:::\n\n\nLa segunda opción, que usaremos en este curso, es instalar y cargar en el entorno\nun paquete de python, [rpy2](https://rpy2.github.io/), que nos permite hacer \ninterfaz con R. \nLa ventaja de esta aproximación es que podemos montar nuestro drive muy fácilmente\ne iniciar una sesión de GRASS allí sin problemas. \nLa desventaja es que, como no cambiamos el entorno de ejecución, en cada celda \ndonde ejecutemos comando de R necesitamos escribir el comando mágico `%%R` para \nvarias líneas de código o `%R` cuando es una única línea de código en\nR^[Ver <https://www.thediar.com/es/blog/google-colab-drive-r/> y <https://blog.revolutionanalytics.com/2016/01/pipelining-r-python.html>].\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n!pip install rpy2==3.5.1\n%reload_ext rpy2.ipython\n```\n:::\n\n\nEsto será necesario para nuestra sesión de [OBIA](unidad_3/exercise_obia.html), \nen que para la clasificación de los objetos la función llama a R internamente, \ny también para la sesión de \n[modelado de nicho con GRASS y R](unidad_5/grass_and_r_sdm.html). \n\n## Ejecutar comandos de R en The Whole Tale\n\nAbrir la notebook de la unidad 5 directamente en RStudio dentro del Tale. Como\nestá preparada para Colab, será necesario, además de adecuar algunas rutas a \ncarpetas y archivos, cambiar las celdas o chunks de `python` a `r` y borrar el \ncomando mágico `%%R` pues no será necesario.\n\n## Descarga rápida de datos en Drive\n\nInstalamos el paquete `gdown` en el entorno Colab\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n!pip install -U --no-cache-dir gdown --pre\n```\n:::\n\n\nMontamos nuestro drive\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# import drive from google colab\nfrom google.colab import drive \n# define mounting point and mount drive\ndrive.mount(\"/content/drive\")\n```\n:::\n\n\nEstablecemos el homedir y entramos al directorio\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nimport os\nhomedir = \"/content/drive/MyDrive/curso_grass_2023\"\nos.chdir(homedir)\n```\n:::\n\n\nDescargamos el archivo para los días 2 a 5 via su \"id\"\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n!gdown \"1rMzsUMQM6wIL7hhuWDJkhvffq5WgO3wB\"\n```\n:::\n\n\nLo descomprimimos en el `homedir` \n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfrom zipfile import ZipFile\nimport os\n\nwith ZipFile('datos_curso_grass_dia2a5.zip', 'r') as f:\n  #extract in current directory\n  f.extractall()\n  f.close()\n```\n:::\n\n\nListo!\n\n",
    "supporting": [
      "install_colab_and_mount_gdrive_files"
    ],
    "filters": [],
    "includes": {}
  }
}