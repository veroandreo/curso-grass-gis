{
  "hash": "66a62484cd43e49d950ae6477c9d653b",
  "result": {
    "markdown": "---\ntitle: 'Ejercicio: Datos satelitales en GRASS GIS'\nauthor: Verónica Andreo\ndate: today\nformat:\n  html:\n    code-tools: true\n    code-copy: true\n    code-fold: false\nexecute:\n  eval: false\n  cache: false\n  keep-ipynb: true\n---\n\n# Trabajamos con imágenes Sentinel 2 en GRASS GIS\n\n\n## Datos Sentinel 2\n\n![Sentinel 2 satellite](../assets/img/sentinel2.jpg)\n\n\n- Lanzamiento: Sentinel-2A en 2015, Sentinel-2B en 2017\n- Tiempo de revisita: ~5 días\n- Cobertura sistemática de áreas terrestres y costeras entre los 84°N y 56°S\n- 13 bandas espectrales con resolución espacial de 10 m (VIS y NIR), 20 m (red-edge y SWIR) y 60 m (otras)\n\n![Sentinels](../assets/img/sentinel_satellites.jpg)\n\nESA - Satélites Copernicus Sentinel. Más información en: \n<https://www.copernicus.eu/en/about-copernicus/infrastructure/discover-our-satellites>\n\n\nDistribución de bandas de Sentinel 2 comparadas con Landsat\n\n![Sentinel and Landsat bands](../assets/img/landsat_and_sentinel_bands.png)\n\n\n### Extensiones para datos Sentinel\n\n- [i.sentinel.download](https://grass.osgeo.org/grass7/manuals/addons/i.sentinel.download.html): descarga productos Copernicus Sentinel de Copernicus Open Access Hub\n- [i.sentinel.import](https://grass.osgeo.org/grass7/manuals/addons/i.sentinel.import.html): importa datos Sentinel descargados de Copernicus Open Access Hub\n- [i.sentinel.preproc](https://grass.osgeo.org/grass7/manuals/addons/i.sentinel.preproc.html): importa y realiza corrección atmosférica y topográfica de imágenes S2\n- [i.sentinel.mask](https://grass.osgeo.org/grass7/manuals/addons/i.sentinel.mask.html): crea máscaras de nubes y sombras para imágenes S2\n\nVer <a href=\"https://grasswiki.osgeo.org/wiki/SENTINEL\">Sentinel wiki</a> para más detalles)\n\n\nRecientemente, se sumaron nuevos miembros en la familia *i.sentinel*:\n\n- [i.sentinel.coverage](https://grass.osgeo.org/grass-stable/manuals/addons/i.sentinel.coverage.html): comprueba la cobertura de área de las escenas de S1 o S2 seleccionadas\n- [i.sentinel.parallel.download](https://grass.osgeo.org/grass-stable/manuals/addons/i.sentinel.parallel.download.html): descarga imagenes Sentinel en paralelo\n\n\n- Para conectarse al [Copernicus Open Access Hub](https://scihub.copernicus.eu/) a través de [i.sentinel.download](https://grass.osgeo.org/grass7/manuals/addons/i.sentinel.download.html), se necesita ser usuario [registrado](https://scihub.copernicus.eu/dhus/#/self-registration)\n- Crear el archivo *`SENTINEL_SETTING.txt`* en el directorio *`$HOME/gisdata/`* con el siguiente contenido:\n\n```\nyour_username\nyour_password\n```\n\n### Niveles de procesamiento Sentinel 2\n\n- **L1C**: Reflectancia a tope de atmósfera o Top of Atmosphere (TOA). Disponibles desde el lanzamiento.\n- **L2A**: Reflectancia Superficial o Bottom of Atmosphere (BOA), i.e., los datos han sido corregidos para remover los efectos de la atmósfera. Sólo desde 2019.\n\n\n### Archivo de datos Sentinel \n\n> **Long Term Archive (LTA)**\n>\n> Todos los productos (1C o 2A) de más de un año son movidos fuera de línea \n> y se requiere un tiempo de espera para ponerlos a disposición del usuario. \n> Esto dificulta la automatización de tareas con productos de más de 12 \n> meses de antigüedad. \n\n\nIniciar GRASS GIS, crear nuevo mapset y establecer región computacional\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\n\n# data directory\nhomedir = os.path.expanduser('~')\n\n# GRASS GIS database variables\ngrassdata = os.path.join(homedir, \"grassdata\")\nproject = \"posgar2007_4_cba\"\nmapset = \"PERMANENT\"\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport subprocess\nimport sys\n\n# Ask GRASS GIS where its Python packages are to be able to start it from the notebook\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n# Importar los paquetes python de GRASS\nimport grass.script as gs\nimport grass.jupyter as gj\n\n# Iniciar GRASS\nsession = gj.init(grassdata, location, mapset)\n```\n:::\n\n\nCrear un nuevo mapset *sentinel2*\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Create a new mapset\ng.mapset -c mapset=sentinel2\n```\n:::\n\n\nDefinir la región computacionalal radio urbano de Córdoba\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# set the computational region to the extent of Cordoba urban area\ng.region -p vector=radio_urbano_cba\n```\n:::\n\n\n### Búsqueda y descarga de datos S2\n\n\nInstalar la extensión *i.sentinel*\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# install i.sentinel extension\ng.extension extension=i.sentinel\n```\n:::\n\n\nLista de escenas disponibles que *intersectan* la región computacional\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# explore list of scenes for a certain date range\ni.sentinel.download -l \\\n  settings=$HOME/gisdata/SENTINEL_SETTING.txt \\\n  start=\"2020-03-01\" \\\n  end=\"2020-04-30\" \\\n  producttype=S2MSI2A \\\n  clouds=30\n```\n:::\n\n\nLista de escenas disponibles que *contienen* la región computacional\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# filter list of scenes by area_relation=Contains\ni.sentinel.download -l \\\n  settings=$HOME/gisdata/SENTINEL_SETTING.txt \\\n  start=\"2020-03-01\" \\\n  end=\"2020-04-30\" \\\n  producttype=S2MSI2A \\\n  clouds=30 \\\n  area_relation=Contains\n```\n:::\n\n\nDescargar la escena seleccionada - NO EJECUTAR\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# download the scene that fully contains our region\n# i.sentinel.download \\\n#   settings=$HOME/gisdata/SENTINEL_SETTING.txt \\\n#   uuid=9a1ea49c-0561-4aa5-ba7a-dc820dc1a316 \\\n#   output=$HOME/gisdata/s2_data\n```\n:::\n\n\nComo la descarga desde el Copernicus Open Access Hub toma su tiempo, vamos a descargar la escena [Sentinel 2](https://drive.google.com/file/d/1RbTMjvElQX_EOwE07GXYOq4rJohCOTvq/view?usp=sharing) que usaremos y moverla a *`HOME/gisdata/s2_data`*\n\n\nHagamos una prueba con datos del LTA...\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ni.sentinel.download -l \\\n  settings=$HOME/gisdata/SENTINEL_SETTING.txt \\\n  start=\"2019-01-01\" \\\n  end=\"2020-02-28\" \\\n  clouds=30\n\ni.sentinel.download \\\n  settings=$HOME/gisdata/SENTINEL_SETTING.txt \\\n  uuid=d4e5df0e-7ead-4407-ba82-d2583be1a6b8 \\\n  output=$HOME/gisdata/s2_data\n```\n:::\n\n\n![](../assets/img/S2_LTA.png)\n\n\n### Importar datos Sentinel 2 a GRASS GIS\n\n![](../assets/img/sentinel_import_options.png)\n\n\n\n#### 1. Importar con corrección atmosférica: [i.sentinel.preproc](https://grass.osgeo.org/grass-stable/manuals/addons/i.sentinel.preproc.html)\n\n##### Productos nivel 1C\n\n![](../assets/img/i_sentinel_preproc.png)\n\n\nPara obtener un valor de AOD, tenemos 2 opciones:\n\n\n\nA. Estimar el valor desde un grafico\n\n![](../assets/img/S2_AOD_plot.png)\n\n\nB. Descargar un archivo y el valor sera estimado \n<img src=\"../assets/img/S2_AOD_file.png\" width=\"30%\">\n\n\n[http://aeronet.gsfc.nasa.gov](https://aeronet.gsfc.nasa.gov)\n\n\nObtener AOD de <br>\n[http://aeronet.gsfc.nasa.gov](https://aeronet.gsfc.nasa.gov)\n\n<img src=\"../assets/img/S2_AOD_file.png\" width=\"65%\">\n\n- Estación *ARM_Cordoba* o *Pilar_Cordoba*\n- Seleccionar fechas de inicio y final\n- Seleccionar: *`Combined file`* y *`All points`*\n- Descargar y descomprimir (el archivo final tiene extensión .dubovik)\n- Pasar el archivo con la opción `aeronet_file`\n\n\nMapa de elevación\n\n- [r.in.srtm.region](https://grass.osgeo.org/grass-stable/manuals/addons/r.in.srtm.region.html): importa (y re-proyecta) los mosaicos SRTM que cubren la región computacional, parchea los mosaicos e interpola datos faltantes\n- [r.in.nasadem](https://grass.osgeo.org/grass-stable/manuals/addons/r.in.nasadem.html): importa (y re-proyecta) los mosaicos de NASADEM que cubren la región computacional y parchea los mosaicos\n\n> Si el DEM es más chico que la región computacional, sólo la región cubierta por el DEM será corregida \n> atmosféricamente...\n\nEjemplo\n\n```bash\n# enter directory with Sentinel scene and unzip file\ncd $HOME/gisdata/s2_data/\nunzip $HOME/gisdata/s2_data/name_of_S2_scene\n\ni.sentinel.preproc -atr \\\n  input_dir=$HOME/gisdata/s2_data/name_of_S2_scene.SAFE \\\n  elevation=NASADEM \\\n  aeronet_file=$HOME/gisdata/s2_data/name_of_aeronet_station.dubovik\n```\n\n\n#### 2. Importar sin corrección atmosférica (as is): [i.sentinel.import](https://grass.osgeo.org/grass-stable/manuals/addons/i.sentinel.import.html)\n\n##### Productos nivel 2A\n\nImprimir información sobre las bandas antes de importarlas\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# print bands info before importing\n# (1 -proj match, 0 -no proj match)\ni.sentinel.import -p input=$HOME/gisdata/s2_data\n```\n:::\n\n\nImportar bandas seleccionadas, recortar y reproyectar al vuelo\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# import bands relevant for RGB, NDVI and NDWI\ni.sentinel.import -rc \\\n  input=$HOME/gisdata/s2_data \\\n  pattern='B(02_1|03_1|04_1|08_1|8A_2|11_2|12_2)0m' \\\n  extent=region\n```\n:::\n\n\nListar bandas importadas y revisar metadatos\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# list raster maps\ng.list type=raster mapset=.\n\n# check metadata of some imported bands\nr.info map=T20JLL_20200330T141049_B03_10m\nr.info map=T20JLL_20200330T141049_B8A_20m\n```\n:::\n\n\n#### Balance de colores y composiciones\n\nAsignar *grey* como paleta de colores\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# apply grey color to RGB bands\nr.colors \\\n  map=T20JLL_20200330T141049_B04_10m,T20JLL_20200330T141049_B03_10m,T20JLL_20200330T141049_B02_10m \\\n  color=grey\n```\n:::\n\n\nAjuste de colores para una composición RGB color natural\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# perform color auto-balancing for RGB bands\ni.colors.enhance \\\n  red=T20JLL_20200330T141049_B04_10m \\\n  green=T20JLL_20200330T141049_B03_10m \\\n  blue=T20JLL_20200330T141049_B02_10m \\\n  strength=95\n```\n:::\n\n\nMostrar la combinación RGB 432\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# display the enhanced RGB combination\nd.mon wx0\nd.rgb -n \\\n  red=T20JLL_20200330T141049_B04_10m \\\n  green=T20JLL_20200330T141049_B03_10m \\\n  blue=T20JLL_20200330T141049_B02_10m\n```\n:::\n\n\n> **Tarea** \n>\n> Realizar balance de colores y mostrar combinacion falso color NIR-RED-GREEN\n\n\n#### Máscara de nubes y sombras de nubes\n\n\nIdentificar y enmascarar nubes y sus sombras\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# identify and mask clouds and clouds shadows: i.sentinel.mask\ni.sentinel.mask -s --o \\\n  blue=T20JLL_20200330T141049_B02_10m \\\n  green=T20JLL_20200330T141049_B03_10m \\\n  red=T20JLL_20200330T141049_B04_10m \\\n  nir=T20JLL_20200330T141049_B08_10m \\\n  nir8a=T20JLL_20200330T141049_B8A_20m \\\n  swir11=T20JLL_20200330T141049_B11_20m \\\n  swir12=T20JLL_20200330T141049_B12_20m \\\n  cloud_mask=cloud \\\n  shadow_mask=shadow \\\n  scale_fac=10000 \\\n  mtd=$HOME/gisdata/s2_data/S2B_MSIL2A_20200330T141049_N0214_R110_T20JLL_20200330T182252.SAFE/GRANULE/L2A_T20JLL_A016009_20200330T141532/MTD_TL.xml\n```\n:::\n\n\nVisualización de la salida: Nubes y sombras de nubes identificadas con [i.sentinel.mask](https://grass.osgeo.org/grass-stable/manuals/addons/i.sentinel.mask.html)\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# display output\nd.mon wx0\nd.rgb \\\n  red=T20JLL_20200330T141049_B04_10m \\\n  green=T20JLL_20200330T141049_B03_10m \\\n  blue=T20JLL_20200330T141049_B02_10m\nd.vect map=cloud fill_color=red\nd.vect map=shadow fill_color=blue\n```\n:::\n\n\n### Índices de agua y vegetación\n\nDefinir región computacional\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# set region\ng.region -p raster=T20JLL_20200330T141049_B08_10m\n```\n:::\n\n\nEstablecer máscara\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# set clouds mask\nv.patch input=cloud,shadow \\\n output=cloud_shadow_mask\nr.mask -i vector=cloud_shadow_mask\n```\n:::\n\n\nEstimación de los índices de vegetación\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# estimate vegetation indices\ni.vi \\\n  red=T20JLL_20200330T141049_B04_10m \\\n  nir=T20JLL_20200330T141049_B08_10m \\\n  output=T20JLL_20200330T141049_NDVI_10m \\\n  viname=ndvi\n```\n:::\n\n\nInstalar extensión *i.wi*\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# install extension\ng.extension extension=i.wi\n```\n:::\n\n\nEstimación de índice de agua\n\nVisualización de los resultados\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# estimate water indices and set color palette\ni.wi \\\n  green=T20JLL_20200330T141049_B03_10m \\\n  nir=T20JLL_20200330T141049_B08_10m \\\n  output=T20JLL_20200330T141049_NDWI_10m \\\n  winame=ndwi_mf\nr.colors map=T20JLL_20200330T141049_NDWI_10m \\\n  color=ndwi\n```\n:::\n\n\n### Segmentación\n\nInstalar la extensión *i.superpixels.slic*\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# install extension\ng.extension extension=i.superpixels.slic\n```\n:::\n\n\nListar los mapas y crear grupos y subgrupos\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# list maps\ng.list type=raster pattern=\"*20200330T141049*\" \\\n  mapset=. output=list.txt\n\n# create groups and subgroups\ni.group group=s2 subgroup=s2 file=list.txt\n```\n:::\n\n\nEjecutar *i.superpixels.slic*\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# run i.superpixels.slic\ni.superpixels.slic input=s2 \\\n  output=superpixels \\\n  num_pixels=2000\n```\n:::\n\n\nConvertir el resultado a vector\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# convert the resulting raster to vector\nr.to.vect input=superpixels \\\n  output=superpixels type=area\n```\n:::\n\n\nEjecutar *i.segment*\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# run i.segment\ni.segment group=s2 output=segments \\\n  threshold=0.5 minsize=50 memory=500\n```\n:::\n\n\nConvertir el resultado a vector\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# convert the resulting raster to vector\nr.to.vect input=segments \\\n  output=segments type=area\n```\n:::\n\n\nMostrar NDVI junto con las 2 salidas de la segmentación\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\n# display NDVI along with the 2 segmentation outputs\nd.mon wx0\nd.rast map=T20JLL_20200330T141049_NDVI_10m\nd.vect map=superpixels color=yellow fill_color=none\nd.vect map=segments color=red fill_color=none\n```\n:::\n\n\n> **Tarea** \n>\n> Ejecutar cualquiera de los 2 métodos de segmentación con diferentes parámetros y comparar los resultados\n\n\n### Clasificación supervisada\n\n\n**Tarea** \n\n- digitalizar áreas de entrenamiento para 3 clases con [g.gui.iclass](http://grass.osgeo.org/grass-stable/manuals/g.gui.iclass.html)\n- guardarlas en un mapa vectorial: `training`\n\n\n![g.gui.iclass](../assets/img/g_gui_iclass.png)\n\n\nClasificación supervisada con Maximum Likelihood\n\n\nConvertir el vector de áreas de entrenamiento a raster\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n# convert to raster\nv.to.rast input=training output=training \\\n  use=cat label_column=class\n```\n:::\n\n\nGenerar archivos de firma espectral\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n# obtain signature files\ni.gensig trainingmap=training \\\n  group=s2 subgroup=s2 \\\n  signaturefile=sig_sentinel\n```\n:::\n\n\nRealizar la clasificación por Maximum Likelihood\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n# perform ML supervised classification\ni.maxlik group=s2 subgroup=s2 \\\n  signaturefile=sig_sentinel \\\n  output=sentinel_maxlik\n```\n:::\n\n\nAñadir etiquetas a las clases\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\n# label classes\nr.category sentinel_maxlik separator=\":\" rules=- << EOF\n1:vegetation\n2:urban\n3:bare soil\nEOF\n```\n:::\n\n\nClasificación supervisada con Maximum Likelihood\n\n### Clasificación supervisada con Machine Learning\n\nInstalar la extensión *r.learn.ml*\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\n# install extension\ng.extension extension=r.learn.ml\n```\n:::\n\n\nRealizar la clasificación por RF\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\n# perform random forest classification\nr.learn.ml trainingmap=training group=s2 \\\n  output=sentinel_rf n_estimators=300\n```\n:::\n\n\nAñadir etiquetas a las clases\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\n# label classes\nr.category sentinel_rf separator=\":\" rules=- << EOF\n1:vegetation\n2:urban\n3:bare soil\nEOF\n```\n:::\n\n\nClasificación supervisada con Random Forest\n\n> **Tarea** \n>\n> Comparar los resultados de ambos tipos de clasificación supervisada a través del índice Kappa\n\nHay un módulo [r.kappa](https://grass.osgeo.org/grass-stable/manuals/r.kappa.html)\n\n\n### Post-procesamiento y validación\n\n- [r.reclass.area](http://grass.osgeo.org/grass-stable/manuals/r.reclass.area.html) para eliminar pequeñas áreas, enmascarar nuevos valores y rellenar los huecos con [r.neighbors](http://grass.osgeo.org/grass-stable/manuals/r.neighbors.html) o [r.fillnulls](http://grass.osgeo.org/grass-stable/manuals/r.fillnulls.html)\n- convertir la salida en vector y ejecutar [v.clean](http://grass.osgeo.org/grass-stable/manuals/v.clean.html) con `tool=rmarea`\n- [r.kappa](https://grass.osgeo.org/grass-stable/manuals/r.kappa.html) para la validación (idealmente también digitalizar una muestra de prueba)\n\n",
    "supporting": [
      "exercise_sentinel2_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}