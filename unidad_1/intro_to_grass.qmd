---
title: "Intro a GRASS GIS"
author: Verónica Andreo
title-slide-attributes: 
  data-background-color: "#1A428A"
format:
  revealjs: 
    hash-type: number 
    slide-number: true
    chalkboard: 
      buttons: true
    preview-links: auto
    logo: "../assets/img/logos_para_fondo_oscuro.png"
    theme: [default, gulich]
from: markdown+emoji
---

## About me {background-color="#1A428A"}

<br>

::: columns
::: {.column width="60%"}
-   Investigadora y docente en el Instituto Gulich
-   Dra. en Cs. Biológicas y Mgter. en Aplicaciones de la Información Espacial
-   Aplicaciones de la información geo-espacial y de sensado remoto a problemas de salud pública
-   Miembro del equipo de desarrollo de GRASS GIS y coordinadora del PSC; OSGeo Charter member & FOSS4G enthusiast
:::

::: {.column width="40%"}

<br>

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 4
library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=-64.4653258, lat=-31.5204194, popup="Gulich")
```
:::
:::

{{< fa globe >}} <https://veroandreo.gitlab.io/>


## Breve intro a los FOSS

Free and Open Source Software (FOSS) significa que **cualquiera** puede usar, copiar, estudiar, y modificar el software. El código fuente es abierto, se comparte gratuitamente, y las personas son libres de modificarlo y mejorarlo según sus necesidades.

![](../assets/img/foss.png){fig-align="center" width=70%}


## Breve intro a OSGeo

La Fundación [OSGeo](https://www.osgeo.org/) fue creada en 2006 para dar soporte al desarrollo colaborativo de software para aplicaciones espaciales y promover su uso.

![](../assets/img/osgeo-logo.png){fig-align="left" width=50%}


## Breve intro a OSGeo

::: columns

::: {.column .smaller width="70%"}
-   Los proyectos deben gestionarse por sí mismos, procurando el consenso y fomentando la participación de todos los colaboradores.
-   Los colaboradores son un recurso escaso y los proyectos exitosos los cortejan y los alientan.
-   Se alienta a los proyectos a adoptar estándares abiertos y a colaborar con otros proyectos de OSGeo.
-   Los proyectos son responsables de revisar y controlar sus códigos fuente para asegurar su integridad.
:::

::: {.column width="30%"}
<br> 
![](https://grass.osgeo.org/images/other/Grass_osgeo_codesprint_2018.jpg)
:::

:::


## GRASS GIS: Breve historia

- **GRASS GIS** (Geographic Resources Analysis Support System), es un paquete de software libre y de código abierto utilizado para la gestión y análisis de datos geoespaciales, procesamiento de imágenes, producción de gráficos y mapas, modelado espacial y visualización.

- Se utiliza en entornos académicos y comerciales de todo el mundo, y también en organismos gubernamentales.

- Originalmente desarrollado por los Laboratorios de Investigación de Ingeniería de la Construcción del Ejército de USA como una herramienta para la gestión del territorio y la planificación ambiental.


::: footer
@neteler_grass_book, @neteler_grass_2012
:::


---

### Un poquito de historia (geek) sobre GRASS...

<br>

::: {.center}
```{=html}
<iframe width="700" height="400" scrolling="no" src="//av.tib.eu/player/12963" frameborder="0" allowfullscreen></iframe>
```
:::

:::{.callout-note appearance="simple"}
:::{.tiny}
No se pierdan la página [GRASS history](https://grass.osgeo.org/about/history/) y la lista de [releases](https://grass.osgeo.org/about/history/releases/) para más detalles y algunas anécdotas
:::
:::


## Ventajas y Desventajas

::: columns
::: {.column width="50%"}
**Ventajas**

-   código abierto
-   fuerte comunidad de usuarios, y apoyo comercial
-   herramientas para datos raster/vectores 2D/3D, imágenes, espacio-temporales
-   interfaz grafica GUI y linea de comandos CLI (facilita la escritura de rutinas)
-   API y librerías de Python
:::

::: {.column width="50%"}
**Desventajas**

-   el inicio es un tanto complicado en comparación con otros SIG \[WIP\]
-   formato nativo (requiere la importación de datos, ofrece también la posibilidad de vincular formatos externos)
-   datos vectoriales con topología (confuso para principiantes, a veces es difícil importar datos rotos)
:::
:::

## Cuándo usar GRASS GIS?

::: columns
::: {.column width="50%"}
**Sí**

-   análisis intensivo de datos geoespaciales
-   trabajar con datos vectoriales topológicos
-   analizar conjuntos de datos espacio-temporales
-   integrar y escribir rutinas con Python
-   desplegar aplicaciones del lado del servidor (ej., WPS)
:::

::: {.column width="50%"}
**Mejor no**

-   para visualizar datos geográficos de forma fácil y rápida (mejor usar QGIS)
-   si te asusta organizar tus datos en *proyectos* y *mapsets*
-   si no tenés idea sobre CRS
:::
:::

---

::: {.center}
Alguna vez trataron de abrir GRASS GIS?

![](../assets/img/start_screen2.png){width=50%}
:::


## Nociones básicas

-   La **BASE DE DATOS GRASS o GRASS DATABASE** (también llamada "GISDBASE") es un directorio, usualmente llamado `grassdata` que contiene todos nuestros *PROYECTOs*
-   Un **PROYECTO** (*LOCATION*) se define por su sistema de coordenadas.
-   Un **MAPSET** es un subdirectorio dentro de un *proyecto*. Los **MAPSETs** pueden hacer referencia a distintos temas, regiones, variables, etc.

## GRASS DB, Proyectos y Mapsets

Para iniciar GRASS GIS se necesita especificar una ruta compuesta de *Database*, *Proyecto* y *Mapset*

::: {.center}
<img src="../assets/img/grass_database.png" width="65%"/>

[GRASS database](https://grass.osgeo.org/grass-stable/manuals/grass_database.html)
:::


---

**Por qué esta estructura?**

-   GRASS GIS tiene un *formato nativo* para los datos raster y vectoriales, por lo tanto estos deben ser *importados* or *vinculados* a un Proyecto (*Location*) y Mapset (ver [r.external](https://grass.osgeo.org/grass-stable/manuals/r.external.html) por ejemplo).

**Cuáles son las ventajas?**

-   GRASS DATABASE, PROYECTOs y MAPSETs son directorios *que pueden ser fácilmente compartidos con otros usuarios*.
-   La base de datos de GRASS (`grassdata`) puede ser *local o remota*, y permite configurar *permisos especiales* para cada mapset en un proyecto (*location*).
-   Todos los mapas dentro de un proyecto tienen necesariamente el mismo sistema de coordenadas.

---

En GRASS 8, se elimina la pantalla de inicio...

![](../assets/img/grass_start.png)

---

y en GRASS 8.2+ se ofrece la opción "single window" por defecto

![](../assets/img/grass_single_window.png){fig-align="center"}

::: {style="text-align: center;"}
no es más linda? {{< fa heart >}}
:::

## Tipos de datos en GRASS GIS

-   [Raster](https://grass.osgeo.org/grass-stable/manuals/rasterintro.html) (incluyendo [imágenes satelitales](https://grass.osgeo.org/grass-stable/manuals/imageryintro.html))
-   [Raster 3D o voxel](https://grass.osgeo.org/grass-stable/manuals/raster3dintro.html)
-   [Vector](https://grass.osgeo.org/grass-stable/manuals/vectorintro.html): punto, línea, límite o borde, área, caras
-   [Espacio-temporales](https://grass.osgeo.org/grass-stable/manuals/temporalintro.html): colecciones de datos raster (**STRDS**), raster 3D (**STR3DS**) o vectores (**STVDS**)

## Módulos

Más de [500 módulos](https://grass.osgeo.org/grass-stable/manuals/full_index.html) para las más variadas tareas, pero con una organización clara:

::: {style="font-size: 0.7em;"}
| Prefix                                                                   | Function class | Type of command         | Example                                                                                                                |
|------------------|------------------|-------------------|------------------|
| [g.\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#g)   | general        | general data management | [g.rename](https://grass.osgeo.org/grass-stable/manuals/g.rename.html): renames map                                    |
| [d.\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#d)   | display        | graphical output        | [d.rast](https://grass.osgeo.org/grass-stable/manuals/d.rast.html): display raster map                                 |
| [r.\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#r)   | raster         | raster processing       | [r.mapcalc](https://grass.osgeo.org/grass-stable/manuals/r.mapcalc.html): map algebra                                  |
| [v.\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#r)   | vector         | vector processing       | [v.clean](https://grass.osgeo.org/grass-stable/manuals/v.clean.html): topological cleaning                             |
| [i.\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#i)   | imagery        | imagery processing      | [i.pca](https://grass.osgeo.org/grass-stable/manuals/i.pca.html): Principal Components Analysis on imagery group       |
| [r3.\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#r3) | voxel          | 3D raster processing    | [r3.stats](https://grass.osgeo.org/grass-stable/manuals/r3.stats.html): voxel statistics                               |
| [db.\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#db) | database       | database management     | [db.select](https://grass.osgeo.org/grass-stable/manuals/db.select.html): select value(s) from table                   |
| [ps.\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#ps) | postscript     | PostScript map creation | [ps.map](https://grass.osgeo.org/grass-stable/manuals/ps.map.html): PostScript map creation                            |
| [t.\*](https://grass.osgeo.org/grass-stable/manuals/full_index.html#t)   | temporal       | space-time datasets     | [t.rast.aggregate](https://grass.osgeo.org/grass-stable/manuals/t.rast.aggregate.html): raster time series aggregation |
:::


## Add-ons o extensiones

Las extensiones o **add-ons** pueden ser instaladas desde el [repositorio central](https://grass.osgeo.org/grass7/manuals/addons/) o desde *GitHub* (u otros similares) usando el comando [g.extension](https://grass.osgeo.org/grass-stable/manuals/g.extension.html)

``` bash
 # instalar una extensión desde el repositorio de GRASS GIS
 g.extension extension=r.hants

 # instalar una extensión desde un repositorio github
 g.extension extension=r.in.sos \
   url=https://github.com/pesekon2/GRASS-GIS-SOS-tools/tree/master/sos/r.in.sos
```

## Add-ons o extensiones

-   Si tenés conocimientos de programación o no, pero te gusta el software de código abierto y GRASS GIS, no dudes en [contribuir](https://github.com/OSGeo/grass/blob/main/CONTRIBUTING.md)!

::: {style="font-size: 7em; text-align: center"}
:technologist:
:::

## Región computacional

![](../assets/img/region.png){fig-align="center"}

:::{.callout-note}
Para más detalles, ver la wiki sobre [Región computacional](https://grasswiki.osgeo.org/wiki/Computational_region)
:::


## Región computacional

-   La **región computacional** es la configuración de límites del área de análisis y resolución espacial (raster).
-   La **región computacional** puede ser definida y modificada con el comando [g.region](https://grass.osgeo.org/grass-stable/manuals/g.region.html) a la extensión de un mapa vectorial, un raster o manualmente a algún area de interés.
-   Los mapas raster de salida *(output)* tendrán una extensión y resolución espacial igual a la región computacional, mientras que los mapas vectoriales son siempre procesados en su extensión original.


## Región computacional

**Cuáles son las ventajas?**

-   Mantener los resultados consistentes
-   Evitar recortar los mapas antes del análisis de sub-áreas
-   Probar un algoritmo o proceso computacional exigente (time consuming) en áreas pequeñas
-   Ajustar la configuración o parámetros de un determinado módulo
-   Ejecutar diferentes procesos en diferentes áreas


## Interfaces

GRASS GIS ofrece diferentes interfaces para la interacción entre usuarios y software

- GUI
- CLI
- Python APIs
- QGIS
- R
- etc...

#### Veamos cada una de ellas! {style="text-align: center;"}

------------------------------------------------------------------------

### Interfaz Gráfica de Usuario (GUI)

::: r-stack
![](../assets/img/grass_single_window_gui_00.png){fig-align="center"}

![](../assets/img/grass_single_window_gui_1.png){.fragment fig-align="center"}

![](../assets/img/grass_single_window_gui_3.png){.fragment fig-align="center"}

![](../assets/img/module_tree_and_search_zoom.png){.fragment fig-align="center"}

![](../assets/img/grass_single_window_gui_2.png){.fragment fig-align="center"}

![](../assets/img/grass_single_window_gui_4.png){.fragment fig-align="center"}
:::

------------------------------------------------------------------------

### Línea de Comandos o terminal

:::{.center}
![](../assets/img/grass_command_line.png){width=80%}
:::

------------------------------------------------------------------------

### Ventajas de la línea de comandos

-   Ejecutar *`history`* para ver todos los comandos anteriores
-   La historia se almacena individualmente por MAPSET
-   Buscar en la historia con `<CTRL-R>`
-   Guardar los comandos en un archivo: `history > my_protocol.sh`, pulir/anotar el protocolo y volver a ejecutar con: `sh my_protocol.sh`
-   Llamar la GUI del módulo y "Copiar" el comando para su posterior replicación.

------------------------------------------------------------------------

### GRASS + {{< fa brands python size=2x >}}

La forma más sencilla de ejecutar una rutina de Python en GRASS GIS, es a través del *Simple Python editor* ... o también se puede escribir la rutina en un editor de texto y ejecutarla desde la línea de comandos (terminal negra) o la GUI (`File > Launch script`):

``` python

 #!/usr/bin/env python
 # simple example for pyGRASS usage: raster processing via modules approach

 from grass.pygrass.modules.shortcuts import general as g
 from grass.pygrass.modules.shortcuts import raster as r

 g.message("Filter elevation map by a threshold...")

 # set computational region
 input = 'elevation'
 g.region(raster=input)
 output = 'elev_100m'
 thresh = 100.0

 r.mapcalc(f"{output} = if({input} > {thresh}, {input}, null())", overwrite = True)
 r.colors(map=output, color="elevation")
```

------------------------------------------------------------------------

... o con Jupyter notebooks y el paquete `grass.jupyter`

:::{.center}
![](../assets/img/jupyter_notebook_locally.png){width=70%}
:::

:::{.callout-note appearance="simple"}
:::{.tiny}
Para más ejemplos ver la <a href="https://grasswiki.osgeo.org/wiki/GRASS_GIS_Jupyter_notebooks#List_of_selected_GRASS_GIS_Jupyter_notebooks">lista de Jupyter notebooks</a> que usan GRASS
:::
:::

::: footer
@haedrich_grass_jupyter
:::

------------------------------------------------------------------------

:::{style="text-align:left"}
![](../assets/img/QGIS_logo_2017.png){width=50%}
:::

<br>

Hay dos formas de utilizar las funciones de GRASS GIS dentro de QGIS:

- [GRASS GIS plugin](https://docs.qgis.org/3.28/en/docs/user_manual/grass_integration/grass_integration.html)
- [Processing toolbox](https://docs.qgis.org/3.28/en/docs/user_manual/processing/toolbox.html)

------------------------------------------------------------------------

Usando GRASS GIS a través del *GRASS GIS plugin*

![](../assets/img/qgis_grass_plugin.png) 

------------------------------------------------------------------------

Usando GRASS GIS a través del *Processing Toolbox*

![](../assets/img/qgis_processing.png)

---

Además con el GRASS provider, podemos visualizar nuestros proyectos, mapsets y mapas de la base de datos de GRASS en QGIS:

![](../assets/img/grass_provider_qgis.png){fig-align="center"}

------------------------------------------------------------------------

### GRASS + {{< fa brands r-project size=2x >}} a través de `rgrass` 

<br><br>

GRASS GIS y R se pueden usar juntos de dos maneras:

-   [R dentro de una sesión de GRASS GIS](https://grasswiki.osgeo.org/wiki/R_statistics/rgrass#R_within_GRASS)
-   [GRASS GIS dentro de una sesión de R](https://grasswiki.osgeo.org/wiki/R_statistics/rgrass#GRASS_within_R)

<br><br>

:::{.callout-note}
Detalles y ejemplos en la wiki <a href="https://grasswiki.osgeo.org/wiki/R_statistics/rgrass7">GRASS y R</a>
:::

------------------------------------------------------------------------

Abriendo RStudio y R desde GRASS

![](../assets/img/RwithinGRASS_and_Rstudio_from_grass.png)
<!-- ### WPS - OGC Web Processing Service -->

<!-- -   [Web Processing Service](https://en.wikipedia.org/wiki/Web_Processing_Service) es un standard de la [OGC](https://en.wikipedia.org/wiki/Open_Geospatial_Consortium). -->
<!-- -   [ZOO-Project](http://zoo-project.org/) y [PyWPS](http://pywps.org/) son interfaces que permiten ejecutar comandos de GRASS GIS de manera simple desde la web. -->

------------------------------------------------------------------------

### GRASS in the cloud: [*actinia*](https://actinia.mundialis.de/)

::: columns

:::{.column width="70%"}
-   API REST para procesamiento escalable, distribuido y de alto rendimiento
-   Utiliza GRASS para tareas de computación
-   Sigue el paradigma de llevar algoritmos a los geodatos almacenados en la nube
-   OSGeo Community project desde 2019.
-   Disponible en [GitHub](https://github.com/mundialis/actinia_core)
:::

:::{.column width="30%"}
![](../assets/img/actinia.png)
:::

:::

::: {.callout-note}
:::{.tiny}
Para más info, ver el <a href="https://neteler.gitlab.io/actinia-introduction/">Tutorial sobre Actinia</a> en la Escuela de verano OpenGeoHub 2019 y el trabajo presentado en la conferencia <a href="https://zenodo.org/record/2631917#.YEZ8pf4o9hE">BiDS 2019</a> por Neteler et al.
:::
:::

------------------------------------------------------------------------

### GRASS in the cloud: [*Open Plains*]()

![](../assets/img/open_plains.png)

::: footer
@white_open_plains
:::

------------------------------------------------------------------------

## Comandos frecuentes y algo más

- [r.import](https://grass.osgeo.org/grass-stable/manuals/r.import.html) y [v.import](https://grass.osgeo.org/grass-stable/manuals/v.import.html): importan mapas de tipo raster y vectorial con re-proyección, recorte y remuestreo al vuelo.

``` bash

 ## IMPORT RASTER DATA: SRTM V3 data for NC

 # set computational region to e.g. 10m elevation model:
 g.region raster=elevation -p

 # Import with reprojection on the fly
 r.import input=n35_w079_1arc_v3.tif output=srtmv3_resamp10m \
  resample=bilinear extent=region resolution=region \
  title="SRTM V3 resampled to 10m resolution"

 ## IMPORT VECTOR DATA

 # import SHAPE file, clip to region extent and reproject to
 # current proyect (location) projection
 v.import input=research_area.shp output=research_area extent=region
```

------------------------------------------------------------------------

- [g.list](https://grass.osgeo.org/grass-stable/manuals/g.list.html): lista el o los tipos de elementos/datos elegidos por el usuario (i.e., raster, vector, raster 3D, region, labels). Opcionalmente permite usar patrones y expresiones regulares para realizar la búsqueda y listado.

``` bash
g.list type=vector pattern="r*"
g.list type=vector pattern="[ra]*"
g.list type=raster pattern="{soil,landuse}*"
```

------------------------------------------------------------------------

- [g.remove](https://grass.osgeo.org/grass-stable/manuals/g.remove.html), [g.rename](https://grass.osgeo.org/grass-stable/manuals/g.rename.html) y [g.copy](https://grass.osgeo.org/grass-stable/manuals/g.copy.html): Estos módulos eliminan, renombran o copian mapas de la base de datos ya sea dentro de un mapset o desde otros mapsets.

``` bash
g.remove type=vector name=lakes -f
g.rename vector=lakes,mylakes
g.copy vector=lakes,mylakes
```

<br>

:::{.callout-important}
Estas tareas deben **SIEMPRE** realizarse desde dentro de GRASS
:::

---

- [g.region](https://grass.osgeo.org/grass-stable/manuals/g.region.html): Maneja los límites y resolución de la región computacional.

``` bash
 ## Subset a raster map
 # 1. Check region settings
 g.region -p

 # 2. Change region (here: relative to current N and W values, expanding values in map units)
 g.region n=n-3000 w=w+4000

 # 3. Subset map
 r.mapcalc "new_elev = elevation"
 r.colors new_elev color=viridis

 # 4. Display maps
 d.mon wx0
 d.rast elevation
 d.rast new_elev
```

---

- [g.mapset](https://grass.osgeo.org/grass-stable/manuals/g.mapset.html) y [g.mapsets](https://grass.osgeo.org/grass-stable/manuals/g.mapsets.html): Estos módulos permiten cambiar de mapset y agregar o remover mapsets a la lista de mapsets accesibles.

``` bash
 # print current mapset
 g.mapset -p

 # change to a different mapset
 g.mapset mapset=modis_lst

 # print mapsets in the search path
 g.mapsets -p

 # list available mapsets in the proyect (location)
 g.mapsets -l

 # add mapset to the search path
 g.mapsets mapset=modis_lst operation=add
```

---

- [r.info](https://grass.osgeo.org/grass-stable/manuals/r.info.html) y [v.info](https://grass.osgeo.org/grass-stable/manuals/v.info.html): Son módulos muy útiles para obtener información básica sobre los mapas como también su historia.

``` bash
 # info for raster map
 r.info elevation

 # info for vector map
 v.info nc_state

 # history of vector map
 v.info nc_state -h
```

---

- [--exec en el comando de inicio de GRASS GIS](https://grass.osgeo.org/grass-stable/manuals/grass7.html): Esta opción permite ejecutar módulos o rutinas de trabajo escritas en bash o Python sin la necesidad de iniciar GRASS GIS (i.e., sin abrir el software).

``` bash
 # running a module
 grass /path/to/grassdata/nc_spm_08_grass7/PERMANENT/ --exec r.univar map=elevation

 # running a script
 grass /path/to/grassdata/nc_spm_08_grass7/PERMANENT/ --exec sh test.sh

 ## test.sh might be as simple as:
 #!/bin/bash
 g.region -p
 g.list type=raster
 r.info elevation
```


# AYUDA!!!

::: {style="color: #e81f76;"}
{{< fa ambulance size=7x >}}
:::

---

### KEEP CALM and GRASS GIS

- [g.manual](https://grass.osgeo.org/grass-stable/manuals/g.manual.html): en la GUI bajo el menú de "Ayuda" o simplemente presionando `<F1>`
- `--help` o `--h` + nombre del módulo en la terminal
- **Manuales de usuario**: <https://grass.osgeo.org/learn/manuals/>
- **Lista de tutoriales**: <https://grass.osgeo.org/learn/tutorials/>
- [GRASS wiki](https://grasswiki.osgeo.org/wiki/GRASS-Wiki): ejemplos, explicaciones y ayuda sobre módulos o tareas particulares, [tutoriales](https://grasswiki.osgeo.org/wiki/Category:Tutorial), aplicaciones, noticias, etc.
- [Jupyter notebooks](https://grasswiki.osgeo.org/wiki/GRASS_GIS_Jupyter_notebooks) con ejemplos de diferentes rutinas
- **lista de mails grass-user**: [subscribite](https://lists.osgeo.org/mailman/listinfo/grass-user) y envía tu consulta o revisa los [archivos](https://lists.osgeo.org/pipermail/grass-user/)
- sumate a nuestro [**canal de chat en gitter**](https://app.gitter.im/#/room/#grassgis_community:gitter.im)


## Enlaces (muy) útiles

- [Lista de tutoriales diversos](https://grass.osgeo.org/learn/tutorials/)
- [Unleash the power of GRASS GIS en US-IALE 2017](https://grasswiki.osgeo.org/wiki/Unleash_the_power_of_GRASS_GIS_at_US-IALE_2017)
- [GRASS GIS workshop en Jena 2018](https://training.gismentors.eu/grass-gis-workshop-jena/)
- [Raster data processing in GRASS GIS](https://grass.osgeo.org/grass-stable/manuals/rasterintro.html)
- [Vector data processing in GRASS GIS](https://grass.osgeo.org/grass-stable/manuals/vectorintro.html)


## Referencias

::: {#refs .tiny}
:::

---

<br><br>

::: {.center}

![](../assets/img/grass_logo_alphab.png)

Seguinos en redes sociales

[{{< fa brands twitter size=2x >}}](https://twitter.com/GRASSGIS) [{{< fa brands mastodon size=2x >}}](https://fosstodon.org/@grassgis)

:::
